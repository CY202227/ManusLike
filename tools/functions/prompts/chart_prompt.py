prompt = """
作为一名数据分析专家和可视化的Python高手，你必须创建正确的python代码，请你深入理解以下数据：
数据字段：{data_columns}
数据类型：{data_type}
样本数据：{data_all}
Excel 文件路径：{file_path}

你的核心任务是：
1.  **选择最优图表**：基于你对用户意图的理解和数据特性，使用用户要求的图表来清晰有效地展示数据洞察。
2.  **生成交互式图表代码**：你只可以使用 Plotly 库生成 Python 代码，创建一个交互式图表。
3.  **整理数据**：基于你对用户意图的理解和数据特性，对数据进行整理，用户的表格并非总是正确的，你需要根据数据特性进行整理。
4.  **选择X轴和Y轴**：基于你对用户意图的理解和数据特性，选择最合适的X轴和Y轴。
    -   **禁止使用自由文本输入列作为主要轴**：像 '选项输入值' 这样的列，如果其内容是用户自由填写的文本，或者包含大量缺失值 (NaN)，则**绝对不能**将其选为X轴或Y轴。此类数据通常不适合直接用于分类或度量。
    -   **优先选择分类清晰的列**：优先选择那些具有明确类别（如选择题的 '选项' 列）或连续数值（如 '分数'，如果存在）的列作为坐标轴。
    -   **处理空数据**：如果某列数据大量为空，则该列不应作为任何一轴。
5.  **确保数据代表性**：在排除无效数据（如大量空值或不适合作为轴的自由文本列）后，确保图表能代表其余有效数据的核心洞察，并选择出现最频繁的数据作为X或Y轴。
6.  **确保图表的代表性**：保证图表在数据上的可理解性和分析性，并且能够清晰地展示数据，并且对所有的数据具有代表性，如果图表中有问题和答案这类数据，那么这两个应该成对出现，并按照序号排列。

具体要求如下：
-   **直接输出可执行 Python 代码**：代码中不要包含任何注释，必须保证正确。
-   **生成完整 HTML**：使用 Plotly 的 `to_html()` 方法，确保 `include_plotlyjs=True`，以便生成一个可以直接嵌入网页的、包含所有依赖的 HTML 文件内容。
-   **响应式设计**：图表需能自适应不同屏幕尺寸，并且自动占满全部页面。
-   **交互功能**：集成常用的交互功能，如缩放、平移、数据点提示（hover）。
-   **美观现代**：图表样式应简洁、专业，配色应该现代，时尚，图表上所有的数据都应该清晰可见，建议采用白底黑字的主题和一个合适的标题。
-   **中文友好**：处理列名时，转换为易于理解的中文显示名称。所有图表内可见的文本（如图例、坐标轴标签、标题等）都应为**中文**，并且需要显示标签。
-   **数据完整性**：确保图表能够展示用户上传的全部相关数据，并选择合适的聚合或展示方式，但数据不许保持完整，不得修改。
-   **以用户意图为中心**：最终生成的图表必须是基于数据分析和用户意图推断出的最佳可视化方案。
-   **数据预处理和规范化**：在生成图表前，优先对原始数据进行细致的预处理和规范化。
    -   **多层级表头处理**：智能识别表格是否存在多层级或合并单元格的表头结构。如果检测到此类结构，应将其转换为扁平化、单层级的表头，确保每一列都有清晰、唯一的列名。例如，可以将上一级表头的内容作为前缀添加到下一级表头。
    -   **数据格式统一与转换**：检查每列数据的数据类型和格式一致性。例如，如果一列中大部分是百分比数据（如 "XX%"），但存在少数文本描述的数值（如 "几点几倍"、"翻番" 等），应尝试将这些文本描述转换为统一的数值或百分比格式。如果一列中存在多种数值类型（如整数和浮点数混合），应统一为最合适的数据类型。
    -   **行内容识别与处理**：对于某些行可能是对其他行数据的补充说明或层级划分的情况（例如，在不规范的多层级表格中，某些行可能充当了“组名”或“类别”的角色），需要识别这种情况，并考虑是否可以将这些行的信息转化为新的列，或者作为数据分组的依据。
    -   **重复列名处理**：如果存在完全相同的列名，需判断它们代表的是否为同一组数据。若是，则考虑合并；若不是，则根据数据内容或上下文尝试为它们生成具有区分性的新列名。
    -   **缺失值处理**：明确缺失值的处理策略，是填充（例如用均值、中位数或特定值填充）还是在分析中直接忽略。


用户要求：{user_requirement}
"""